#
# Component Cmake
#
message("Enter component.cmake")

if(CONFIG_STDK_IOT_CORE)

	set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include include/bsp include/os include/mqtt)
	set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/external)
	set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" ./)

	if(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_ESP8266)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/esp8266)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/esp8266)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_ESP32)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/esp32)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/esp32)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_RTL8195)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/rtl8195)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/rtl8195)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_RTL8720C)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/rtl8720c)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/rtl8720c)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_RTL8721C)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/rtl8721c)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/rtl8721c)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_MT7682)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/mt7682)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/mt7682)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_EMW3166)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/emw3166)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/emw3166)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_EMW3080)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/emw3080)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/emw3080)
	elseif(CONFIG_STDK_IOT_CORE_BSP_SUPPORT_LPC54018)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/lpc54018)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/lpc54018)
	else()
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/bsp/posix)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" include/bsp/posix)
	endif()

	if(CONFIG_STDK_IOT_CORE_OS_SUPPORT_FREERTOS)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/os/freertos)
	elseif(CONFIG_STDK_IOT_CORE_OS_SUPPORT_TIZENRT)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/os/tizenrt)
	elseif(CONFIG_STDK_IOT_CORE_OS_SUPPORT_POSIX)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/os/posix)
	elseif(CONFIG_STDK_IOT_CORE_OS_SUPPORT_MOCOS)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/os/mocos)
	endif()

	if(CONFIG_STDK_IOT_CORE_NET_MBEDTLS)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/net/mbedtls)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" port/net/mbedtls)
	else()
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" port/net/openssl)
		set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" port/net/openssl)
	endif()

	set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" deps/cbor/tinycbor/src)
	set(COMPONENT_ADD_INCLUDEDIRS "${COMPONENT_ADD_INCLUDEDIRS}" deps/cbor/tinycbor/src)

	set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" security)
	set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" security/helper/libsodium)
	if(CONFIG_STDK_IOT_CORE_USE_MBEDTLS)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" security/helper/mbedtls)
	endif()
	
	if(CONFIG_STDK_IOT_CORE_SECURITY_BACKEND_SOFTWARE)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" security/backend/software)
		if(CONFIG_STDK_IOT_CORE_FS_SW_ENCRYPTION)
			set(COMPONENT_ADD_LINKER_DEPS "${COMPONENT_ADD_LINKER_DEPS}" $(COMPONENT_PATH)/security/backend/software/lib/esp -liot_security_ss)
		endif()
	else()
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" security/backend/hardware)
	endif()

	set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" easysetup)

	if(CONFIG_STDK_IOT_CORE_EASYSETUP_HTTP)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" easysetup/http)
	endif()

	if(CONFIG_STDK_IOT_CORE_EASYSETUP_POSIX_TESTING)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" easysetup/posix_testing)
	endif()

	if(CONFIG_STDK_IOT_CORE_EASYSETUP_X509)
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" easysetup/http/tls)
	else()
		set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" easysetup/http/tcp)
	endif()

	include_directories(${COMPONENT_PATH}/include/iot_common.h)

	set(COMPONENT_SRCDIRS "${COMPONENT_SRCDIRS}" mqtt/client mqtt/packet)

	set(BOILERPLATE_HEADER ${COMPONENT_PATH}/include/certs/boilerplate.h)
	file(GLOB ROOT_CA_FILE_LIST "${COMPONENT_PATH}/certs/root_ca_*.pem")
	set(ROOT_CA_FILE ${COMPONENT_PATH}/certs/root_ca.pem)
	set(ROOT_CA_SOURCE ${COMPONENT_PATH}/iot_root_ca.c)
	add_custom_target(buildRootCA ALL)
	add_custom_command(
			TARGET buildRootCA
			PRE_BUILD
			COMMENT "Generating root certificate"
			WORKING_DIRECTORY ${COMPONENT_PATH}
			COMMAND if [ -e ${ROOT_CA_FILE} ] \; then rm ${ROOT_CA_FILE} \; fi \;
			COMMAND cat ${ROOT_CA_FILE_LIST} >> ${ROOT_CA_FILE}
			COMMAND cat ${BOILERPLATE_HEADER} > ${ROOT_CA_SOURCE}
			COMMAND xxd -i ${ROOT_CA_FILE} >> ${ROOT_CA_SOURCE}
			COMMAND sed -i.bak 's/[^ ]*_pem/st_root_ca/g' ${ROOT_CA_SOURCE}
			COMMAND sed -i.bak 's/unsigned/const unsigned/g' ${ROOT_CA_SOURCE}
			COMMAND rm -f ${ROOT_CA_SOURCE}.bak
			COMMAND rm -f ${ROOT_CA_FILE}
			BYPRODUCTS ${ROOT_CA_SOURCE}
	)

	set(CMAKE_C_STANDARD 99)
else()
	# Disable SmartThing Device SDK support
	set(COMPONENT_ADD_INCLUDEDIRS "")
	set(COMPONENT_SRCDIRS "")
endif()
